package com.eveningoutpost.dexdrip.Services.ob1.ble;

import static com.eveningoutpost.dexdrip.Services.ob1.ble.GATTUnitTypes.*;

public enum GATTUnitConstants {
    UNITLESS(NONE,0x2700,"unitless"),
    PERCENTAGE(NONE,0x27AD,"percentage"),
    PER_MILLE(NONE,0x27AE,"per mille"),
    METABOLIC_EQUIVALENT(NONE,0x27B9,"metabolic equivalent"),
    PARTS_PER_MILLION(NONE,0x27C4,"parts per million"),
    PARTS_PER_BILLION(NONE,0x27C5,"parts per billion"),
    REFRACTIVE_INDEX(NONE,0x271D,"refractive index"),
    RELATIVE_PERMEABILITY(NONE,0x271E,"relative permeability"),
    METRE(LENGTH,0x2701,"length (metre)"),
    KILOGRAM(MASS,0x2702,"mass (kilogram)"),
    SECOND(TIME,0x2703,"time (second)"),
    AMPERE(ELECTRIC_CURRENT,0x2704,"electric current (ampere)"),
    KELVIN(THERMODYNAMIC_TEMPERATURE,0x2705,"thermodynamic temperature (kelvin)"),
    MOLE(AMOUNT_OF_SUBSTANCE,0x2706,"amount of substance (mole)"),
    CANDELA(LUMINOUS_INTENSITY,0x2707,"luminous intensity (candela)"),
    SQUARE_METRES(AREA,0x2710,"area (square metres)"),
    CUBIC_METRES(VOLUME,0x2711,"volume (cubic metres)"),
    METRES_PER_SECOND(VELOCITY,0x2712,"velocity (metres per second)"),
    METRES_PER_SECOND_SQUARED(ACCELERATION,0x2713,"acceleration (metres per second squared)"),
    RECIPROCAL_METRE(WAVENUMBER,0x2714,"wavenumber (reciprocal metre)"),
    KILOGRAM_PER_CUBIC_METRE_DENSITY(DENSITY,0x2715,"density (kilogram per cubic metre)"),
    KILOGRAM_PER_SQUARE_METRE(SURFACE_DENSITY,0x2716,"surface density (kilogram per square metre)"),
    CUBIC_METRE_PER_KILOGRAM(SPECIFIC_VOLUME,0x2717,"specific volume (cubic metre per kilogram)"),
    AMPERE_PER_SQUARE_METRE(CURRENT_DENSITY,0x2718,"current density (ampere per square metre)"),
    AMPERE_PER_METRE(MAGNETIC_FIELD_STRENGTH,0x2719,"magnetic field strength (ampere per metre)"),
    MOLE_PER_CUBIC_METRE(AMOUNT_CONCENTRATION,0x271A,"amount concentration (mole per cubic metre)"),
    KILOGRAM_PER_CUBIC_METRE_MASS(MASS_CONCENTRATION,0x271B,"mass concentration (kilogram per cubic metre)"),
    CANDELA_PER_SQUARE_METRE(LUMINANCE,0x271C,"luminance (candela per square metre)"),
    RADIAN(PLANE_ANGLE,0x2720,"plane angle (radian)"),
    STERADIAN(SOLID_ANGLE,0x2721,"solid angle (steradian)"),
    HERTZ(FREQUENCY,0x2722,"frequency (hertz)"),
    NEWTON(FORCE,0x2723,"force (newton)"),
    PASCAL(PRESSURE,0x2724,"pressure (pascal)"),
    JOULE(ENERGY,0x2725,"energy (joule)"),
    WATT(POWER,0x2726,"power (watt)"),
    COULOMB(ELECTRIC_CHARGE,0x2727,"electric charge (coulomb)"),
    VOLT(ELECTRIC_POTENTIAL_DIFFERENCE,0x2728,"electric potential difference (volt)"),
    FARAD(CAPACITANCE,0x2729,"capacitance (farad)"),
    OHM(ELECTRIC_RESISTANCE,0x272A,"electric resistance (ohm)"),
    SIEMENS(ELECTRIC_CONDUCTANCE,0x272B,"electric conductance (siemens)"),
    WEBER(MAGNETIC_FLUX,0x272C,"magnetic flux (weber)"),
    TESLA(MAGNETIC_FLUX_DENSITY,0x272D,"magnetic flux density (tesla)"),
    HENRY(INDUCTANCE,0x272E,"inductance (henry)"),
    DEGREE_CELSIUS(CELSIUS_TEMPERATURE,0x272F,"Celsius temperature (degree Celsius)"),
    LUMEN(LUMINOUS_FLUX,0x2730,"luminous flux (lumen)"),
    LUX(ILLUMINANCE,0x2731,"illuminance (lux)"),
    BECQUEREL(ACTIVITY_REFERRED_TO_A_RADIONUCLIDE,0x2732,"activity referred to a radionuclide (becquerel)"),
    GRAY(ABSORBED_DOSE,0x2733,"absorbed dose (gray)"),
    SIEVERT(DOSE_EQUIVALENT,0x2734,"dose equivalent (sievert)"),
    KATAL(CATALYTIC_ACTIVITY,0x2735,"catalytic activity (katal)"),
    PASCAL_SECOND(DYNAMIC_VISCOSITY,0x2740,"dynamic viscosity (pascal second)"),
    NEWTON_METRE(MOMENT_OF_FORCE,0x2741,"moment of force (newton metre)"),
    NEWTON_PER_METRE(SURFACE_TENSION,0x2742,"surface tension (newton per metre)"),
    RADIAN_PER_SECOND(ANGULAR_VELOCITY,0x2743,"angular velocity (radian per second)"),
    RADIAN_PER_SECOND_SQUARED(ANGULAR_ACCELERATION,0x2744,"angular acceleration (radian per second squared)"),
    WATT_PER_SQUARE_METRE_HEAT(HEAT_FLUX_DENSITY,0x2745,"heat flux density (watt per square metre)"),
    JOULE_PER_KELVIN(HEAT_CAPACITY,0x2746,"heat capacity (joule per kelvin)"),
    JOULE_PER_KILOGRAM_KELVIN(SPECIFIC_HEAT_CAPACITY,0x2747,"specific heat capacity (joule per kilogram kelvin)"),
    JOULE_PER_KILOGRAM(SPECIFIC_ENERGY,0x2748,"specific energy (joule per kilogram)"),
    WATT_PER_METRE_KELVIN(THERMAL_CONDUCTIVITY,0x2749,"thermal conductivity (watt per metre kelvin)"),
    JOULE_PER_CUBIC_METRE(ENERGY_DENSITY,0x274A,"energy density (joule per cubic metre)"),
    VOLT_PER_METRE(ELECTRIC_FIELD_STRENGTH,0x274B,"electric field strength (volt per metre)"),
    COULOMB_PER_CUBIC_METRE(ELECTRIC_CHARGE_DENSITY,0x274C,"electric charge density (coulomb per cubic metre)"),
    COULOMB_PER_SQUARE_METRE(SURFACE_CHARGE_DENSITY,0x274D,"surface charge density (coulomb per square metre)"),
    COULOMB_PER_SQUARE_METRE_ELECTRIC(ELECTRIC_FLUX_DENSITY,0x274E,"electric flux density (coulomb per square metre)"),
    FARAD_PER_METRE(PERMITTIVITY,0x274F,"permittivity (farad per metre)"),
    HENRY_PER_METRE(PERMEABILITY,0x2750,"permeability (henry per metre)"),
    JOULE_PER_MOLE(MOLAR_ENERGY,0x2751,"molar energy (joule per mole)"),
    JOULE_PER_MOLE_KELVIN(MOLAR_ENTROPY,0x2752,"molar entropy (joule per mole kelvin)"),
    COULOMB_PER_KILOGRAM(EXPOSURE,0x2753,"exposure (coulomb per kilogram)"),
    GRAY_PER_SECOND(ABSORBED_DOSE_RATE,0x2754,"absorbed dose rate (gray per second)"),
    WATT_PER_STERADIAN(RADIANT_INTENSITY,0x2755,"radiant intensity (watt per steradian)"),
    WATT_PER_SQUARE_METRE_STERADIAN(RADIANCE,0x2756,"radiance (watt per square metre steradian)"),
    KATAL_PER_CUBIC_METRE(CATALYTIC_ACTIVITY_CONCENTRATION,0x2757,"catalytic activity concentration (katal per cubic metre)"),
    MINUTE(TIME,0x2760,"time (minute)"),
    HOUR(TIME,0x2761,"time (hour)"),
    DAY(TIME,0x2762,"time (day)"),
    DEGREE_ANGLE(PLANE_ANGLE,0x2763,"plane angle (degree)"),
    MINUTE_ANGLE(PLANE_ANGLE,0x2764,"plane angle (minute)"),
    SECOND_ANGLE(PLANE_ANGLE,0x2765,"plane angle (second)"),
    HECTARE(AREA,0x2766,"area (hectare)"),
    LITRE(VOLUME,0x2767,"volume (litre)"),
    TONNE(MASS,0x2768,"mass (tonne)"),
    BAR(PRESSURE,0x2780,"pressure (bar)"),
    MILLIMETRE_OF_MERCURY(PRESSURE,0x2781,"pressure (millimetre of mercury)"),
    ÅNGSTRÖM(LENGTH,0x2782,"length (ångström)"),
    NAUTICAL_MILE(LENGTH,0x2783,"length (nautical mile)"),
    BARN(AREA,0x2784,"area (barn)"),
    KNOT(VELOCITY,0x2785,"velocity (knot)"),
    NEPER(LOGARITHMIC_RADIO_QUANTITY,0x2786,"logarithmic radio quantity (neper)"),
    BEL(LOGARITHMIC_RADIO_QUANTITY,0x2787,"logarithmic radio quantity (bel)"),
    YARD(LENGTH,0x27A0,"length (yard)"),
    PARSEC(LENGTH,0x27A1,"length (parsec)"),
    INCH(LENGTH,0x27A2,"length (inch)"),
    FOOT(LENGTH,0x27A3,"length (foot)"),
    MILE(LENGTH,0x27A4,"length (mile)"),
    POUNDFORCE_PER_SQUARE_INCH(PRESSURE,0x27A5,"pressure (pound-force per square inch)"),
    KILOMETRE_PER_HOUR(VELOCITY,0x27A6,"velocity (kilometre per hour)"),
    MILE_PER_HOUR(VELOCITY,0x27A7,"velocity (mile per hour)"),
    REVOLUTION_PER_MINUTE(ANGULAR_VELOCITY,0x27A8,"angular velocity (revolution per minute)"),
    GRAM_CALORIE(ENERGY,0x27A9,"energy (gram calorie)"),
    KILOGRAM_CALORIE(ENERGY,0x27AA,"energy (kilogram calorie)"),
    KILOWATT_HOUR(ENERGY,0x27AB,"energy (kilowatt hour)"),
    DEGREE_FAHRENHEIT(THERMODYNAMIC_TEMPERATURE,0x27AC,"thermodynamic temperature (degree Fahrenheit)"),
    BEATS_PER_MINUTE(PERIOD,0x27AF,"period (beats per minute)"),
    AMPERE_HOURS(ELECTRIC_CHARGE,0x27B0,"electric charge (ampere hours)"),
    MILLIGRAM_PER_DECILITRE(MASS_DENSITY,0x27B1,"mass density (milligram per decilitre)"),
    MILLIMOLE_PER_LITRE(MASS_DENSITY,0x27B2,"mass density (millimole per litre)"),
    YEAR(TIME,0x27B3,"time (year)"),
    MONTH(TIME,0x27B4,"time (month)"),
    COUNT_PER_CUBIC_METRE(CONCENTRATION,0x27B5,"concentration (count per cubic metre)"),
    WATT_PER_SQUARE_METRE(IRRADIANCE,0x27B6,"irradiance (watt per square metre)"),
    PER_KILOGRAM_PER_MINUTE(MILLILITER,0x27B7,"milliliter (per kilogram per minute)"),
    POUND(MASS,0x27B8,"mass (pound)"),
    STEP_PER_MINUTE(STEP,0x27BA,"step (per minute)"),
    STROKE_PER_MINUTE(STROKE,0x27BC,"stroke (per minute)"),
    KILOMETRE_PER_MINUTE(PACE,0x27BD,"pace (kilometre per minute)"),
    LUMEN_PER_WATT(LUMINOUS_EFFICACY,0x27BE,"luminous efficacy (lumen per watt)"),
    LUMEN_HOUR(LUMINOUS_ENERGY,0x27BF,"luminous energy (lumen hour)"),
    LUX_HOUR(LUMINOUS_EXPOSURE,0x27C0,"luminous exposure (lux hour)"),
    GRAM_PER_SECOND(MASS_FLOW,0x27C1,"mass flow (gram per second)"),
    LITRE_PER_SECOND(VOLUME_FLOW,0x27C2,"volume flow (litre per second)"),
    DECIBLE(SOUND_PRESSURE,0x27C3,"sound pressure (decible)");

    GATTUnitTypes unitType;
    short value;
    String description;
    GATTUnitConstants(GATTUnitTypes type, int v, String desc) {
        this.unitType = type;
        this.value = (short)v;
        this.description = desc;
    }

}
